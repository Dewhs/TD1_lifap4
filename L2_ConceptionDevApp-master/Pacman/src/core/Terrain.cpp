#include "Terrain.h"
#include <cassert>

const char m_terrain1[15][21] = {
 "####################",
 "#.###....##........#",
 "#.#####..##...####.#",
 "#........##........#",
 "#........###.......#",
 "#...#..#....#......#",
 "#......#...##......#",
 "#####..#....#..#####",
 "#......##...#......#",
 "#......#....#......#",
 "#..................#",
 "#..................#",
 "#.....#......#.....#",
 "#.....#......#.....#",
 "####################"
};

const char m_terrain2[15][21] = {
 "####################",
 "#.###....##.....#..#",
 "#.#####..##...####.#",
 "#........##........#",
 "#........###.......#",
 "#...#..#....#......#",
 "#......#...##......#",
 "#####..#....#..#####",
 "#......##...#......#",
 "#......#....#......#",
 "#..................#",
 "#..................#",
 "#.....#......#.....#",
 "#.....#......#.....#",
 "####################"
};


Terrain::Terrain () {
	m_dimx = 20;
	m_dimy = 15;
	for(int x=0;x<m_dimx;++x)
		for(int y=0;y<m_dimy;++y)
		{
			switch(m_terrain1[m_dimy-1-y][x])
			{
				case '#': m_ter[x][y] = WALL; break;
				case '.': m_ter[x][y] = DOT; break;
				case ' ': m_ter[x][y] = SPACE; break;
			}
			// m_ter[x][y] = m_terrain1[m_dimy-1-y][x];
		}
}

bool Terrain::estPositionPersoValide (const int x, const int y) const {
	return ((x>=0) && (x<m_dimx) && (y>=0) && (y<m_dimy) && (m_ter[x][y]!='#'));
}

void Terrain::mangePastille (const int x, const int y) {
	assert(x>=0);
	assert(y>=0);
	assert(x<m_dimx);
	assert(y<m_dimy);
	m_ter[x][y]=SPACE;
}


